'''

import com.example.noticeboard.oauth.service.CustomOAuth2UserService;
import com.example.noticeboard.oauth.support.CustomAuthenticationFailureHandler;
import com.example.noticeboard.oauth.support.OAuth2AuthenticationSuccessHandler;
import com.example.noticeboard.security.jwt.support.JwtAuthenticationFilter;
import com.example.noticeboard.account.user.constant.UserRole;
import com.example.noticeboard.admin.visitant.util.SingleVisitInterceptor;
import com.example.noticeboard.common.exception.FilterExceptionHandler;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.HttpSecurityBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer;
import org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter authenticationFilter;
    private final CustomOAuth2UserService oauth2UserService;
    private final SingleVisitInterceptor singleVisitInterceptor;
    private final OAuth2AuthenticationSuccessHandler oauth2AuthenticationSuccessHandler;
    private final CustomAuthenticationFailureHandler customAuthenticationFailureHandler;

    @Bean
    public BCryptPasswordEncoder encodePassword() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
                .httpBasic().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeHttpRequests()
                .requestMatchers(HttpMethod.GET, "/admin/**").hasRole(UserRole.MANAGER.name())
                .requestMatchers(HttpMethod.GET, "/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/admin/report/**" , "/admin/login", "/mail/**", "/admin/login", "/logins", "/registers", "/oauth/token", "/user/logout").permitAll()
                .requestMatchers( "/admin/**").hasRole(UserRole.MANAGER.name())
                .requestMatchers(HttpMethod.POST, "/**").hasAnyRole(UserRole.USER.name(), UserRole.MANAGER.name())
                .requestMatchers(HttpMethod.PATCH, "/posts/views/**").permitAll()
                .requestMatchers(HttpMethod.DELETE, "/**").hasAnyRole(UserRole.USER.name(), UserRole.MANAGER.name())
                .requestMatchers(HttpMethod.PATCH, "/**").permitAll()
                .requestMatchers(HttpMethod.PUT, "/**").hasAnyRole(UserRole.USER.name(), UserRole.MANAGER.name())
                .and()
                // Configures authentication support using an OAuth 2.0 and/or OpenID Connect 1.0 Provider. 
                .oauth2Login().loginPage("/authorization/denied")
                // loginPage가 리턴하는 OAuth2LoginConfigurer는 다음과 같음.
// public final class OAuth2LoginConfigurer<B extends HttpSecurityBuilder<B>>
// extends AbstractAuthenticationFilterConfigurer<B, org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer<B>, OAuth2LoginAuthenticationFilter>
                // OAuth2LoginAuthenticationFilter
                .successHandler(oauth2AuthenticationSuccessHandler)
                .failureHandler(customAuthenticationFailureHandler)
                .userInfoEndpoint().userService(oauth2UserService);

        http.addFilterBefore(new FilterExceptionHandler(),
                UsernamePasswordAuthenticationFilter.class);

        http.addFilterBefore(singleVisitInterceptor,
                UsernamePasswordAuthenticationFilter.class
        );

        http.addFilterBefore(authenticationFilter,
                UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
---

### ✅ SecurityConfig 클래스란?

`SecurityConfig` 클래스는 Spring Security를 사용하여 **애플리케이션의 보안 설정을 담당**하는 핵심 구성 클래스입니다.
로그인, 인증, 인가, 필터 추가 등 다양한 보안 관련 기능을 이곳에서 설정하게 됩니다.

---

### 🔒 주요 기능 요약

1. **JWT 인증 방식 사용**

   * 세션을 사용하지 않고, JWT 토큰을 통해 사용자 인증을 처리합니다.
   * `STATELESS` 설정으로 서버는 로그인 상태를 저장하지 않습니다.

2. **소셜 로그인(OAuth2) 지원**

   * Google, Kakao 등 OAuth2 제공자를 통한 로그인 기능을 제공합니다.
   * 로그인 성공/실패에 따른 핸들러를 설정하여 추가적인 처리도 가능합니다.

3. **URL별 접근 권한 제어**

   * 어떤 경로는 로그인 없이 접근 가능하도록 허용하고,
   * 어떤 경로는 특정 역할(예: USER, MANAGER)만 접근할 수 있도록 제한합니다.

4. **보안 기능 설정**

   * CSRF 및 HTTP Basic 인증을 비활성화합니다 (REST API 환경에 맞게).
   * 세션을 사용하지 않고, 토큰 기반 인증을 사용하도록 설정합니다.

5. **커스텀 필터 추가**

   * JWT 인증 필터
   * 예외 처리 필터
   * 방문자 체크 필터 등 필요한 기능을 직접 필터로 추가할 수 있습니다.

---

### 🧩 설정 예시 설명

* `@Bean BCryptPasswordEncoder`
  → 비밀번호를 안전하게 암호화하여 저장하는 데 사용됩니다.

* `http.csrf().disable()`
  → CSRF 보호 기능을 끕니다. (세션을 사용하지 않는 REST API에서는 일반적입니다)

* `sessionCreationPolicy(SessionCreationPolicy.STATELESS)`
  → 서버가 세션을 생성하거나 저장하지 않도록 설정합니다.

* `authorizeHttpRequests()`
  → 경로별로 접근 권한을 설정합니다.

#### 예시 권한 설정

```plaintext
GET /admin/**          → MANAGER 역할만 접근 가능
GET /**                → 누구나 접근 가능
POST /admin/login 등   → 일부 경로는 로그인 없이 접근 가능
POST /**               → USER 또는 MANAGER 역할만 접근 가능
PATCH /posts/views/**  → 누구나 접근 가능
PATCH /**              → 모두 허용 (주의 필요)
DELETE /**             → USER 또는 MANAGER만 가능
```

* `oauth2Login()`
  → 소셜 로그인 기능 설정

  * 로그인 성공 시 실행할 핸들러
  * 실패 시 실행할 핸들러
  * 사용자 정보 조회 서비스 등을 설정할 수 있습니다.

---

### 🧷 필터 등록 (`addFilterBefore`)

Spring Security의 기본 필터 앞에 커스텀 필터들을 등록합니다. 실행 순서가 중요합니다.

```java
http.addFilterBefore(new FilterExceptionHandler(), UsernamePasswordAuthenticationFilter.class);
http.addFilterBefore(singleVisitInterceptor, UsernamePasswordAuthenticationFilter.class);
http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);
```

* `FilterExceptionHandler`: 필터 단계에서 발생한 예외를 처리합니다.
* `singleVisitInterceptor`: 방문자 수 체크 또는 중복 방문 방지 등의 역할로 추정됩니다.
* `authenticationFilter`: JWT 토큰을 검사하여 인증을 수행합니다.

---

### 💡 주입되는 주요 의존성들

* `JwtAuthenticationFilter`: JWT 토큰을 검증하고 인증 처리
* `CustomOAuth2UserService`: 소셜 로그인 시 사용자 정보를 불러옴
* `OAuth2AuthenticationSuccessHandler`: 소셜 로그인 성공 시 실행되는 로직 처리
* `CustomAuthenticationFailureHandler`: 소셜 로그인 실패 시 처리
* `SingleVisitInterceptor`: 특정 요청의 방문 제어 로직 담당

---

### ✨ 정리

`SecurityConfig`는 다음과 같은 기능을 담당합니다:

* JWT 기반 로그인 처리
* 소셜 로그인(OAuth2) 연동
* URL 경로별로 접근 권한 세밀하게 제어
* 보안 필터를 추가하여 인증, 예외 처리 등 다양한 보안 로직 적용

이러한 설정을 통해 REST API 환경에서 보다 안전하고 효율적인 인증/인가 처리를 구성할 수 있습니다.

'''
