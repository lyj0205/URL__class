'''
import com.example.noticeboard.admin.login.dto.AdminLoginRequest;
import com.example.noticeboard.admin.login.service.AdminLoginService;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.security.auth.login.AccountException;

@RestController
@RequiredArgsConstructor
@RequestMapping("/admin")
public class AdminLoginController {

    private final AdminLoginService adminLoginService;

    @PostMapping("/login")
    public ResponseEntity adminLogin(@RequestBody AdminLoginRequest request, HttpServletResponse response) throws AccountException {

        return ResponseEntity.ok().body(adminLoginService.adminLogin(request, response));
    }

}

`AdminLoginController` 클래스는 관리자 로그인 요청을 처리하는 Spring REST 컨트롤러입니다.

---

## 클래스 및 메서드 기능

### 1. 클래스 역할

* `/admin` 경로 하위 요청을 처리하는 REST API 컨트롤러
* `AdminLoginService`를 통해 실제 로그인 로직을 수행
* 관리자 로그인 전용 엔드포인트를 제공합니다.

---

### 2. `adminLogin` 메서드

* HTTP POST 요청을 `/admin/login` 경로에서 받음
* 요청 본문에 담긴 `AdminLoginRequest` (관리자 로그인 정보 DTO)를 파라미터로 받음
* `HttpServletResponse` 객체도 받아서, 로그인 처리 시 필요한 응답 헤더나 쿠키 설정에 사용 가능
* `adminLoginService.adminLogin()` 메서드를 호출해 로그인 처리 후 반환값을 HTTP 200(OK) 응답 본문으로 전달
* 로그인 실패 시 `AccountException` 예외가 발생할 수 있음

---

## 요약

| 기능          | 설명                                  |
| ----------- | ----------------------------------- |
| 관리자 로그인 API | `/admin/login` POST 요청 처리           |
| 로그인 요청 처리   | 전달받은 로그인 정보로 `adminLoginService` 호출 |
| 로그인 결과 반환   | 로그인 성공 시 결과를 200 OK 응답으로 반환         |
| 예외 처리       | 로그인 실패 시 `AccountException` 던짐 가능   |

'''


