'''

import com.example.noticeboard.security.jwt.dto.Token;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseCookie;

@NoArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class CookieSupport {

    @Value("${server.url}")
    private static String DOMAIN_URL;

    public static ResponseCookie createAccessToken(String access) {
        return ResponseCookie.from("accessToken" , access)
                .path("/")
                .maxAge(30 * 60 * 1000)
                .secure(true)
                .domain(DOMAIN_URL)
                .httpOnly(true)
                .sameSite("none")
                .build();
    }

    public static ResponseCookie createRefreshToken(String refresh) {
        return ResponseCookie.from("refreshToken" , refresh)
                .path("/")
                .maxAge(14 * 24 * 60 * 60 * 1000)
                .secure(true)
                .domain(DOMAIN_URL)
                .httpOnly(true)
                .sameSite("none")
                .build();
    }

    public static void setCookieFromJwt(Token token , HttpServletResponse response) {
        response.addHeader("Set-Cookie" , createAccessToken(token.getAccessToken()).toString());
        response.addHeader("Set-Cookie" , createRefreshToken(token.getRefreshToken()).toString());
    }

    public static void deleteJwtTokenInCookie(HttpServletResponse response) {
        Cookie accessToken = new Cookie("accessToken", null);
        accessToken.setPath("/");
        accessToken.setMaxAge(0);
        accessToken.setDomain(DOMAIN_URL);

        Cookie refreshToken = new Cookie("refreshToken", null);
        refreshToken.setPath("/");
        refreshToken.setMaxAge(0);
        refreshToken.setDomain(DOMAIN_URL);

        response.addCookie(accessToken);
        response.addCookie(refreshToken);
    }

}

`CookieSupport` 클래스는 JWT 토큰 관련 쿠키를 생성, 설정, 삭제하는 **쿠키 유틸리티 클래스**입니다.

---

## 클래스 개요

* 쿠키 관련 작업을 모아둔 헬퍼 클래스입니다.
* `@NoArgsConstructor(access = lombok.AccessLevel.PRIVATE)` 로 생성자를 private 처리하여 인스턴스화 방지(유틸 클래스 목적).
* `DOMAIN_URL`은 쿠키 도메인 설정에 사용되는데, `@Value`로 외부에서 주입하려 했지만 `static` 필드에는 적용되지 않아 실제 값 주입 안 될 가능성이 있습니다.(주석 참고)

---

## 주요 메서드

### 1. `createAccessToken(String access)`

```java
public static ResponseCookie createAccessToken(String access)
```

* 이름: `"accessToken"`
* 값: 액세스 토큰 문자열
* 경로: `/` (도메인 전체에서 접근 가능)
* 만료 시간: 30분 (`30 * 60 * 1000` 밀리초, 다만 `maxAge()`는 초 단위라 오작동 가능성 있음)
* 보안 설정: `secure=true` (HTTPS에서만 전송)
* 도메인: `DOMAIN_URL`
* HttpOnly: true (JS에서 쿠키 접근 불가)
* SameSite: `"none"` (크로스 사이트 요청 시에도 쿠키 전송 허용)
* 반환: Spring의 `ResponseCookie` 객체

---

### 2. `createRefreshToken(String refresh)`

* 이름: `"refreshToken"`
* 값: 리프레시 토큰 문자열
* 경로: `/`
* 만료 시간: 14일 (`14 * 24 * 60 * 60 * 1000` 밀리초, 역시 `maxAge()` 초 단위 주의)
* 기타 설정은 `createAccessToken`과 동일

---

### 3. `setCookieFromJwt(Token token, HttpServletResponse response)`

* 액세스 토큰과 리프레시 토큰을 각각 쿠키로 만들어
* 응답 헤더 `"Set-Cookie"`에 추가합니다.
* 즉, 로그인 등 토큰 발급 시 클라이언트에게 두 개의 쿠키를 전달하는 역할입니다.

---

### 4. `deleteJwtTokenInCookie(HttpServletResponse response)`

* `"accessToken"`과 `"refreshToken"` 쿠키를 삭제합니다.
* 쿠키의 값은 `null`로, `maxAge`를 `0`으로 설정하여 즉시 만료시킵니다.
* 도메인과 경로도 지정하여 삭제 대상 쿠키가 정확하게 매칭되도록 합니다.
* 주로 로그아웃 시 쿠키를 클라이언트에서 제거할 때 사용합니다.

---

## 주의 사항 및 개선점

* `@Value("${server.url}")` 는 `static` 필드에는 자동 주입이 안 됩니다.
  → 현재 `DOMAIN_URL` 값이 주입되지 않을 수 있으니, 다른 방법 (예: `@Component`로 바꾸고 인스턴스 필드로 사용하거나, 생성자 주입)으로 관리하는 것이 좋습니다.

* `maxAge` 메서드 인자는 초 단위인데, 현재는 밀리초 단위 값이 들어가 있어 쿠키 만료 시간이 비정상적일 수 있습니다.
  → `maxAge(30 * 60)` (30분 = 1800초) 또는 `maxAge(14 * 24 * 60 * 60)` (14일) 로 수정하는 것이 맞습니다.

---

## 요약

| 기능            | 설명                                     |
| ------------- | -------------------------------------- |
| 액세스 토큰 쿠키 생성  | `accessToken` 이름의 쿠키를 만들어 보안 설정과 함께 반환 |
| 리프레시 토큰 쿠키 생성 | `refreshToken` 이름의 쿠키를 만들어 반환          |
| 쿠키 응답 헤더 설정   | 로그인 시 두 토큰 쿠키를 HTTP 응답에 포함             |
| 쿠키 삭제         | 로그아웃 시 쿠키 삭제용으로 만료시킨 쿠키를 응답에 추가        |

'''


