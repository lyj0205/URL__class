'''
public class TokenForgeryException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public TokenForgeryException(String message) {
        super(message);
    }

}

`TokenForgeryException` 클래스는 **JWT 토큰 위조(변조)** 상황에서 사용되는 **사용자 정의 예외 클래스**입니다. 

---

### ✅ 클래스 설명

```java
public class TokenForgeryException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public TokenForgeryException(String message) {
        super(message);
    }
}
```

#### 🔹 기본 구조

* `RuntimeException`을 상속 → **Unchecked 예외**

  * 예외 처리를 반드시 try-catch로 하지 않아도 됩니다.
  * 보통 개발자가 의도한 예외 상황에 사용됩니다.

* `serialVersionUID`: 자바에서 직렬화(Serializable)를 사용하는 클래스가 변경되었을 때 버전 관리를 도와주는 값입니다. 필수는 아니지만, 명시하는 것이 좋습니다.

* 생성자:

  ```java
  public TokenForgeryException(String message) {
      super(message);
  }
  ```

  * 예외 발생 시 전달된 메시지를 부모 클래스에 넘겨서 예외 메시지로 사용할 수 있게 합니다.

---

### 💡 사용 목적

이 예외는 주로 **JWT 토큰을 검증**할 때,

* 유효하지 않은 서명
* 위조된 내용
* 토큰 값이 조작됨 등

의심스러운 JWT가 감지되었을 때 다음과 같이 사용될 수 있습니다:

```java
if (!isValid(token)) {
    throw new TokenForgeryException("토큰이 위조되었거나 유효하지 않습니다.");
}
```

---

### ✨ 요약

| 항목     | 설명                                  |
| ------ | ----------------------------------- |
| 클래스 이름 | `TokenForgeryException`             |
| 상속     | `RuntimeException` (Unchecked 예외)   |
| 용도     | JWT 등 **토큰이 위조되었을 때 예외를 던지기 위해 사용** |
| 예외 메시지 | 생성자에서 직접 설정 가능 (`super(message)`)   |

'''
